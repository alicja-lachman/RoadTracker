package com.polsl.roadtracker.database.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAGNETIC_FIELD_DATA".
*/
public class MagneticFieldDataDao extends AbstractDao<MagneticFieldData, Void> {

    public static final String TABLENAME = "MAGNETIC_FIELD_DATA";

    /**
     * Properties of entity MagneticFieldData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Timestamp = new Property(0, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property X = new Property(1, float.class, "x", false, "X");
        public final static Property Y = new Property(2, float.class, "y", false, "Y");
        public final static Property Z = new Property(3, float.class, "z", false, "Z");
        public final static Property RouteId = new Property(4, Long.class, "routeId", false, "ROUTE_ID");
    }


    public MagneticFieldDataDao(DaoConfig config) {
        super(config);
    }
    
    public MagneticFieldDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAGNETIC_FIELD_DATA\" (" + //
                "\"TIMESTAMP\" INTEGER," + // 0: timestamp
                "\"X\" REAL NOT NULL ," + // 1: x
                "\"Y\" REAL NOT NULL ," + // 2: y
                "\"Z\" REAL NOT NULL ," + // 3: z
                "\"ROUTE_ID\" INTEGER);"); // 4: routeId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAGNETIC_FIELD_DATA_TIMESTAMP ON MAGNETIC_FIELD_DATA" +
                " (\"TIMESTAMP\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAGNETIC_FIELD_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MagneticFieldData entity) {
        stmt.clearBindings();
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(1, timestamp);
        }
        stmt.bindDouble(2, entity.getX());
        stmt.bindDouble(3, entity.getY());
        stmt.bindDouble(4, entity.getZ());
 
        Long routeId = entity.getRouteId();
        if (routeId != null) {
            stmt.bindLong(5, routeId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MagneticFieldData entity) {
        stmt.clearBindings();
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(1, timestamp);
        }
        stmt.bindDouble(2, entity.getX());
        stmt.bindDouble(3, entity.getY());
        stmt.bindDouble(4, entity.getZ());
 
        Long routeId = entity.getRouteId();
        if (routeId != null) {
            stmt.bindLong(5, routeId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MagneticFieldData readEntity(Cursor cursor, int offset) {
        MagneticFieldData entity = new MagneticFieldData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // timestamp
            cursor.getFloat(offset + 1), // x
            cursor.getFloat(offset + 2), // y
            cursor.getFloat(offset + 3), // z
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // routeId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MagneticFieldData entity, int offset) {
        entity.setTimestamp(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setX(cursor.getFloat(offset + 1));
        entity.setY(cursor.getFloat(offset + 2));
        entity.setZ(cursor.getFloat(offset + 3));
        entity.setRouteId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MagneticFieldData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MagneticFieldData entity) {
        return null;
    }

    @Override
    public boolean hasKey(MagneticFieldData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
